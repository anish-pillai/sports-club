# Sports Club Application - Environment Variables Example
# Copy this file to .env and fill in your own values

# Database connection
# Create a PostgreSQL database (e.g., using Neon, Supabase, or any PostgreSQL provider)
# Format: postgresql://username:password@hostname:port/database?sslmode=require
DATABASE_URL='postgresql://username:password@hostname:port/database?sslmode=require'

# Next Auth Configuration
# NEXTAUTH_URL should be the URL where your application is hosted
# In development, use http://localhost:3000
NEXTAUTH_URL=http://localhost:3000

# NEXTAUTH_SECRET is used to encrypt the NextAuth.js JWT
# Generate a secure random string using: 
# node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
NEXTAUTH_SECRET=your_generated_secret_here

# Google OAuth
# Create these credentials at https://console.cloud.google.com/
# 1. Create a new project
# 2. Configure the OAuth consent screen
# 3. Create OAuth client ID credentials (Web application type)
# 4. Add authorized redirect URIs: http://localhost:3000/api/auth/callback/google
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret

# Stripe (Payment Processing)
# Create an account at https://stripe.com/
# Get your API keys from the Stripe Dashboard
# Test keys start with 'sk_test_' and live keys start with 'sk_live_'
STRIPE_SECRET_KEY=your_stripe_secret_key

# Stripe Webhook Secret
# Create this by setting up a webhook in the Stripe Dashboard
# or by using the Stripe CLI: stripe listen --forward-to localhost:3000/api/webhooks
STRIPE_WEBHOOK_SECRET=your_stripe_webhook_secret
