generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          Role         @default(USER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  bookings      Booking[]
  enrollments   Enrollment[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Arena {
  id           String          @id @default(cuid())
  name         String
  description  String
  imageUrl     String?
  sportType    SportType
  location     String
  hourlyRate   Float
  availability Json
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  bookings     Booking[]
  classes      CoachingClass[]
}

model Booking {
  id         String        @id @default(cuid())
  userId     String
  arenaId    String
  startTime  DateTime
  endTime    DateTime
  totalPrice Float
  status     BookingStatus @default(PENDING)
  paymentId  String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  arena      Arena         @relation(fields: [arenaId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CoachingClass {
  id          String       @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  arenaId     String
  sportType   SportType
  classType   ClassType
  price       Float
  capacity    Int
  schedule    Json
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  arena       Arena        @relation(fields: [arenaId], references: [id])
  enrollments Enrollment[]
}

model Enrollment {
  id        String           @id @default(cuid())
  userId    String
  classId   String
  status    EnrollmentStatus @default(ACTIVE)
  paymentId String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  class     CoachingClass    @relation(fields: [classId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus
  paymentMethod String
  stripeId      String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum SportType {
  BASKETBALL
  TENNIS
  FOOTBALL
  VOLLEYBALL
  BADMINTON
  SWIMMING
  CRICKET
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ClassType {
  INDIVIDUAL
  GROUP
}

enum EnrollmentStatus {
  ACTIVE
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
